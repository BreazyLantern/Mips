	.data #allocation for data storage
hello:	.asciiz "hello world" #label and string to store
space1:	.space 20 
space2:	.byte 1, 2, 3, 0, 4
space3: .word 1, 2, 3, 0, 4
space:	.asciiz "\n\n--program has run--\n\n"

	.text #instruction to execute
	#print out hello
	li $v0, 4 #load immidiate destinattion at $v0 from source 4
	la $a0, hello #load address to destination $a0 from hello label
	syscall
	
	li $v0, 4
	la $a0, space
	syscall
	
	li 	$t0, 5
	li 	$t1, 10
	li	$t2, 2
	
	mul	$t1, $t1, $t2
	add	$t0, $t0, $t1 #$t0 is the summation register
	sub	$t0, $t0, $t2
	
	#li 	$t0, 0 #clears out register in t0
	#move 	$t1, $zero #clear register
	#xor 	$t2, $t2, $t2#clear out register with itself using xor table
	
	li	$v0, 1
	move	$a0, $t0
	syscall
	
	li $t0, 0
	li $t1, 0
	li $t2, 0
	
	
loop:	beq	$t0, 5, printout #when t0 is 5 will exit
	addi 	$t0, $t0, 1
	addi	$t1, $t1, 1
	li 	$t2, 0
	j 	loop2	#jumps back into the loop2 label.
	
loop2:	addi 	$t2, $t2, 1 	#couter
	addi	$t1, $t1, 2	#body of the loop
	bne	$t2, 3, loop2 #not equal then start loop again
	j	loop	#back to first loop


printout: 
	li	$v0, 4
	la	$a0, space
	syscall
	
	li	$v0, 1
	move $a0, $t1 #should be 35
	syscall
	
exit:	li	$v0, 10
	syscall
	
